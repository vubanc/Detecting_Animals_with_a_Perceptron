{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "61c75e75",
   "metadata": {},
   "source": [
    "# Animal Detecting Perceptron"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d788d239",
   "metadata": {},
   "source": [
    "# Importing and exploring the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c60a7bd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5d798178",
   "metadata": {},
   "outputs": [],
   "source": [
    "def unpickle(file):\n",
    "    import pickle\n",
    "    with open(file, 'rb') as fo:\n",
    "        dict = pickle.load(fo, encoding='bytes')\n",
    "    return dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "972ae421",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replace the file directories for the datasets\n",
    "\n",
    "train1=unpickle(\"C:/Users/User/OneDrive - University of Arkansas/Coursework/Fall 2022/Artificial Intelligence/Homework/Homework_4/cifar-10-batches-py/data_batch_1\")\n",
    "train2=unpickle(\"C:/Users/User/OneDrive - University of Arkansas/Coursework/Fall 2022/Artificial Intelligence/Homework/Homework_4/cifar-10-batches-py/data_batch_2\")\n",
    "train3=unpickle(\"C:/Users/User/OneDrive - University of Arkansas/Coursework/Fall 2022/Artificial Intelligence/Homework/Homework_4/cifar-10-batches-py/data_batch_3\")\n",
    "train4=unpickle(\"C:/Users/User/OneDrive - University of Arkansas/Coursework/Fall 2022/Artificial Intelligence/Homework/Homework_4/cifar-10-batches-py/data_batch_4\")\n",
    "train5=unpickle(\"C:/Users/User/OneDrive - University of Arkansas/Coursework/Fall 2022/Artificial Intelligence/Homework/Homework_4/cifar-10-batches-py/data_batch_5\")\n",
    "test=unpickle(\"C:/Users/User/OneDrive - University of Arkansas/Coursework/Fall 2022/Artificial Intelligence/Homework/Homework_4/cifar-10-batches-py/test_batch\")\n",
    "metadata=unpickle(\"C:/Users/User/OneDrive - University of Arkansas/Coursework/Fall 2022/Artificial Intelligence/Homework/Homework_4/cifar-10-batches-py/batches.meta\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1c2e2bf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{b'num_cases_per_batch': 10000,\n",
       " b'label_names': [b'airplane',\n",
       "  b'automobile',\n",
       "  b'bird',\n",
       "  b'cat',\n",
       "  b'deer',\n",
       "  b'dog',\n",
       "  b'frog',\n",
       "  b'horse',\n",
       "  b'ship',\n",
       "  b'truck'],\n",
       " b'num_vis': 3072}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metadata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3fc4ea6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{b'batch_label': b'training batch 5 of 5',\n",
       " b'labels': [1,\n",
       "  8,\n",
       "  5,\n",
       "  1,\n",
       "  5,\n",
       "  7,\n",
       "  4,\n",
       "  3,\n",
       "  8,\n",
       "  2,\n",
       "  7,\n",
       "  2,\n",
       "  0,\n",
       "  1,\n",
       "  5,\n",
       "  9,\n",
       "  6,\n",
       "  2,\n",
       "  0,\n",
       "  8,\n",
       "  2,\n",
       "  7,\n",
       "  0,\n",
       "  4,\n",
       "  1,\n",
       "  7,\n",
       "  7,\n",
       "  4,\n",
       "  4,\n",
       "  9,\n",
       "  9,\n",
       "  6,\n",
       "  2,\n",
       "  4,\n",
       "  1,\n",
       "  6,\n",
       "  4,\n",
       "  9,\n",
       "  6,\n",
       "  6,\n",
       "  9,\n",
       "  6,\n",
       "  9,\n",
       "  9,\n",
       "  5,\n",
       "  7,\n",
       "  1,\n",
       "  6,\n",
       "  8,\n",
       "  2,\n",
       "  9,\n",
       "  5,\n",
       "  9,\n",
       "  5,\n",
       "  3,\n",
       "  7,\n",
       "  1,\n",
       "  3,\n",
       "  3,\n",
       "  9,\n",
       "  1,\n",
       "  7,\n",
       "  8,\n",
       "  9,\n",
       "  7,\n",
       "  4,\n",
       "  3,\n",
       "  4,\n",
       "  9,\n",
       "  5,\n",
       "  8,\n",
       "  4,\n",
       "  9,\n",
       "  3,\n",
       "  6,\n",
       "  1,\n",
       "  1,\n",
       "  4,\n",
       "  3,\n",
       "  9,\n",
       "  9,\n",
       "  1,\n",
       "  9,\n",
       "  9,\n",
       "  2,\n",
       "  4,\n",
       "  3,\n",
       "  2,\n",
       "  4,\n",
       "  7,\n",
       "  1,\n",
       "  5,\n",
       "  1,\n",
       "  8,\n",
       "  6,\n",
       "  3,\n",
       "  6,\n",
       "  3,\n",
       "  4,\n",
       "  4,\n",
       "  9,\n",
       "  9,\n",
       "  9,\n",
       "  7,\n",
       "  0,\n",
       "  5,\n",
       "  7,\n",
       "  7,\n",
       "  4,\n",
       "  8,\n",
       "  8,\n",
       "  4,\n",
       "  2,\n",
       "  0,\n",
       "  5,\n",
       "  2,\n",
       "  4,\n",
       "  9,\n",
       "  1,\n",
       "  7,\n",
       "  7,\n",
       "  4,\n",
       "  8,\n",
       "  8,\n",
       "  8,\n",
       "  0,\n",
       "  2,\n",
       "  3,\n",
       "  6,\n",
       "  3,\n",
       "  9,\n",
       "  0,\n",
       "  8,\n",
       "  2,\n",
       "  2,\n",
       "  4,\n",
       "  8,\n",
       "  8,\n",
       "  1,\n",
       "  8,\n",
       "  5,\n",
       "  7,\n",
       "  6,\n",
       "  0,\n",
       "  9,\n",
       "  1,\n",
       "  4,\n",
       "  8,\n",
       "  2,\n",
       "  1,\n",
       "  0,\n",
       "  5,\n",
       "  1,\n",
       "  6,\n",
       "  5,\n",
       "  3,\n",
       "  4,\n",
       "  9,\n",
       "  9,\n",
       "  0,\n",
       "  3,\n",
       "  5,\n",
       "  4,\n",
       "  2,\n",
       "  6,\n",
       "  3,\n",
       "  9,\n",
       "  4,\n",
       "  9,\n",
       "  8,\n",
       "  6,\n",
       "  4,\n",
       "  1,\n",
       "  1,\n",
       "  9,\n",
       "  8,\n",
       "  2,\n",
       "  2,\n",
       "  1,\n",
       "  8,\n",
       "  5,\n",
       "  9,\n",
       "  7,\n",
       "  8,\n",
       "  1,\n",
       "  1,\n",
       "  4,\n",
       "  2,\n",
       "  4,\n",
       "  2,\n",
       "  0,\n",
       "  8,\n",
       "  8,\n",
       "  0,\n",
       "  0,\n",
       "  4,\n",
       "  3,\n",
       "  0,\n",
       "  7,\n",
       "  7,\n",
       "  6,\n",
       "  1,\n",
       "  6,\n",
       "  7,\n",
       "  1,\n",
       "  5,\n",
       "  6,\n",
       "  1,\n",
       "  7,\n",
       "  2,\n",
       "  4,\n",
       "  0,\n",
       "  2,\n",
       "  2,\n",
       "  5,\n",
       "  9,\n",
       "  3,\n",
       "  2,\n",
       "  1,\n",
       "  4,\n",
       "  1,\n",
       "  2,\n",
       "  9,\n",
       "  8,\n",
       "  5,\n",
       "  2,\n",
       "  3,\n",
       "  3,\n",
       "  4,\n",
       "  9,\n",
       "  7,\n",
       "  2,\n",
       "  3,\n",
       "  9,\n",
       "  7,\n",
       "  6,\n",
       "  2,\n",
       "  9,\n",
       "  7,\n",
       "  5,\n",
       "  4,\n",
       "  0,\n",
       "  8,\n",
       "  7,\n",
       "  2,\n",
       "  0,\n",
       "  3,\n",
       "  5,\n",
       "  1,\n",
       "  3,\n",
       "  1,\n",
       "  7,\n",
       "  8,\n",
       "  7,\n",
       "  9,\n",
       "  8,\n",
       "  2,\n",
       "  9,\n",
       "  1,\n",
       "  4,\n",
       "  8,\n",
       "  6,\n",
       "  7,\n",
       "  3,\n",
       "  6,\n",
       "  9,\n",
       "  7,\n",
       "  9,\n",
       "  4,\n",
       "  5,\n",
       "  8,\n",
       "  0,\n",
       "  5,\n",
       "  6,\n",
       "  6,\n",
       "  0,\n",
       "  8,\n",
       "  4,\n",
       "  6,\n",
       "  1,\n",
       "  4,\n",
       "  2,\n",
       "  2,\n",
       "  1,\n",
       "  8,\n",
       "  4,\n",
       "  4,\n",
       "  0,\n",
       "  2,\n",
       "  4,\n",
       "  1,\n",
       "  9,\n",
       "  8,\n",
       "  9,\n",
       "  0,\n",
       "  7,\n",
       "  1,\n",
       "  1,\n",
       "  6,\n",
       "  4,\n",
       "  7,\n",
       "  4,\n",
       "  6,\n",
       "  9,\n",
       "  3,\n",
       "  2,\n",
       "  7,\n",
       "  3,\n",
       "  7,\n",
       "  4,\n",
       "  5,\n",
       "  1,\n",
       "  9,\n",
       "  6,\n",
       "  3,\n",
       "  9,\n",
       "  6,\n",
       "  0,\n",
       "  7,\n",
       "  0,\n",
       "  0,\n",
       "  0,\n",
       "  6,\n",
       "  6,\n",
       "  9,\n",
       "  7,\n",
       "  3,\n",
       "  2,\n",
       "  0,\n",
       "  6,\n",
       "  7,\n",
       "  5,\n",
       "  0,\n",
       "  2,\n",
       "  0,\n",
       "  3,\n",
       "  8,\n",
       "  6,\n",
       "  9,\n",
       "  9,\n",
       "  7,\n",
       "  1,\n",
       "  2,\n",
       "  0,\n",
       "  8,\n",
       "  8,\n",
       "  0,\n",
       "  8,\n",
       "  2,\n",
       "  0,\n",
       "  9,\n",
       "  5,\n",
       "  1,\n",
       "  3,\n",
       "  3,\n",
       "  0,\n",
       "  7,\n",
       "  6,\n",
       "  1,\n",
       "  0,\n",
       "  7,\n",
       "  9,\n",
       "  3,\n",
       "  1,\n",
       "  6,\n",
       "  3,\n",
       "  5,\n",
       "  1,\n",
       "  8,\n",
       "  3,\n",
       "  3,\n",
       "  2,\n",
       "  2,\n",
       "  5,\n",
       "  7,\n",
       "  4,\n",
       "  8,\n",
       "  4,\n",
       "  3,\n",
       "  0,\n",
       "  5,\n",
       "  9,\n",
       "  5,\n",
       "  4,\n",
       "  3,\n",
       "  2,\n",
       "  1,\n",
       "  9,\n",
       "  2,\n",
       "  8,\n",
       "  7,\n",
       "  8,\n",
       "  2,\n",
       "  9,\n",
       "  1,\n",
       "  8,\n",
       "  6,\n",
       "  4,\n",
       "  2,\n",
       "  3,\n",
       "  3,\n",
       "  0,\n",
       "  8,\n",
       "  2,\n",
       "  3,\n",
       "  5,\n",
       "  7,\n",
       "  1,\n",
       "  8,\n",
       "  8,\n",
       "  1,\n",
       "  0,\n",
       "  9,\n",
       "  9,\n",
       "  9,\n",
       "  8,\n",
       "  7,\n",
       "  5,\n",
       "  0,\n",
       "  5,\n",
       "  0,\n",
       "  5,\n",
       "  1,\n",
       "  1,\n",
       "  4,\n",
       "  6,\n",
       "  7,\n",
       "  1,\n",
       "  2,\n",
       "  8,\n",
       "  5,\n",
       "  1,\n",
       "  0,\n",
       "  3,\n",
       "  5,\n",
       "  8,\n",
       "  6,\n",
       "  6,\n",
       "  6,\n",
       "  7,\n",
       "  7,\n",
       "  4,\n",
       "  0,\n",
       "  5,\n",
       "  2,\n",
       "  8,\n",
       "  3,\n",
       "  7,\n",
       "  0,\n",
       "  1,\n",
       "  9,\n",
       "  9,\n",
       "  2,\n",
       "  1,\n",
       "  7,\n",
       "  6,\n",
       "  5,\n",
       "  3,\n",
       "  8,\n",
       "  3,\n",
       "  0,\n",
       "  7,\n",
       "  6,\n",
       "  2,\n",
       "  7,\n",
       "  7,\n",
       "  6,\n",
       "  5,\n",
       "  6,\n",
       "  4,\n",
       "  8,\n",
       "  5,\n",
       "  1,\n",
       "  4,\n",
       "  9,\n",
       "  1,\n",
       "  0,\n",
       "  5,\n",
       "  7,\n",
       "  0,\n",
       "  2,\n",
       "  5,\n",
       "  0,\n",
       "  8,\n",
       "  1,\n",
       "  0,\n",
       "  4,\n",
       "  2,\n",
       "  2,\n",
       "  5,\n",
       "  5,\n",
       "  8,\n",
       "  0,\n",
       "  8,\n",
       "  9,\n",
       "  8,\n",
       "  4,\n",
       "  7,\n",
       "  6,\n",
       "  4,\n",
       "  8,\n",
       "  6,\n",
       "  7,\n",
       "  5,\n",
       "  0,\n",
       "  1,\n",
       "  3,\n",
       "  9,\n",
       "  9,\n",
       "  1,\n",
       "  4,\n",
       "  3,\n",
       "  8,\n",
       "  6,\n",
       "  6,\n",
       "  2,\n",
       "  0,\n",
       "  7,\n",
       "  1,\n",
       "  6,\n",
       "  1,\n",
       "  6,\n",
       "  4,\n",
       "  4,\n",
       "  8,\n",
       "  0,\n",
       "  0,\n",
       "  2,\n",
       "  5,\n",
       "  4,\n",
       "  4,\n",
       "  4,\n",
       "  3,\n",
       "  7,\n",
       "  2,\n",
       "  0,\n",
       "  5,\n",
       "  1,\n",
       "  5,\n",
       "  7,\n",
       "  9,\n",
       "  7,\n",
       "  0,\n",
       "  5,\n",
       "  6,\n",
       "  2,\n",
       "  3,\n",
       "  8,\n",
       "  0,\n",
       "  6,\n",
       "  4,\n",
       "  6,\n",
       "  8,\n",
       "  4,\n",
       "  1,\n",
       "  5,\n",
       "  0,\n",
       "  6,\n",
       "  3,\n",
       "  9,\n",
       "  4,\n",
       "  5,\n",
       "  4,\n",
       "  7,\n",
       "  9,\n",
       "  6,\n",
       "  2,\n",
       "  7,\n",
       "  6,\n",
       "  1,\n",
       "  7,\n",
       "  8,\n",
       "  5,\n",
       "  1,\n",
       "  9,\n",
       "  8,\n",
       "  1,\n",
       "  3,\n",
       "  8,\n",
       "  7,\n",
       "  4,\n",
       "  8,\n",
       "  1,\n",
       "  2,\n",
       "  3,\n",
       "  7,\n",
       "  0,\n",
       "  3,\n",
       "  4,\n",
       "  0,\n",
       "  0,\n",
       "  4,\n",
       "  8,\n",
       "  4,\n",
       "  1,\n",
       "  1,\n",
       "  9,\n",
       "  4,\n",
       "  8,\n",
       "  9,\n",
       "  5,\n",
       "  8,\n",
       "  1,\n",
       "  3,\n",
       "  7,\n",
       "  9,\n",
       "  8,\n",
       "  0,\n",
       "  5,\n",
       "  8,\n",
       "  4,\n",
       "  3,\n",
       "  0,\n",
       "  6,\n",
       "  8,\n",
       "  1,\n",
       "  5,\n",
       "  6,\n",
       "  0,\n",
       "  0,\n",
       "  5,\n",
       "  0,\n",
       "  9,\n",
       "  2,\n",
       "  3,\n",
       "  2,\n",
       "  7,\n",
       "  6,\n",
       "  6,\n",
       "  4,\n",
       "  7,\n",
       "  4,\n",
       "  5,\n",
       "  1,\n",
       "  3,\n",
       "  0,\n",
       "  8,\n",
       "  7,\n",
       "  9,\n",
       "  0,\n",
       "  6,\n",
       "  8,\n",
       "  4,\n",
       "  3,\n",
       "  0,\n",
       "  8,\n",
       "  7,\n",
       "  4,\n",
       "  0,\n",
       "  0,\n",
       "  4,\n",
       "  3,\n",
       "  0,\n",
       "  6,\n",
       "  0,\n",
       "  1,\n",
       "  1,\n",
       "  5,\n",
       "  4,\n",
       "  7,\n",
       "  4,\n",
       "  2,\n",
       "  5,\n",
       "  4,\n",
       "  6,\n",
       "  4,\n",
       "  6,\n",
       "  8,\n",
       "  3,\n",
       "  8,\n",
       "  3,\n",
       "  8,\n",
       "  7,\n",
       "  6,\n",
       "  4,\n",
       "  6,\n",
       "  9,\n",
       "  6,\n",
       "  1,\n",
       "  0,\n",
       "  0,\n",
       "  5,\n",
       "  4,\n",
       "  8,\n",
       "  7,\n",
       "  6,\n",
       "  5,\n",
       "  2,\n",
       "  5,\n",
       "  7,\n",
       "  3,\n",
       "  8,\n",
       "  7,\n",
       "  9,\n",
       "  7,\n",
       "  8,\n",
       "  6,\n",
       "  5,\n",
       "  9,\n",
       "  9,\n",
       "  8,\n",
       "  2,\n",
       "  8,\n",
       "  0,\n",
       "  2,\n",
       "  4,\n",
       "  2,\n",
       "  4,\n",
       "  0,\n",
       "  7,\n",
       "  6,\n",
       "  9,\n",
       "  3,\n",
       "  1,\n",
       "  2,\n",
       "  6,\n",
       "  2,\n",
       "  5,\n",
       "  4,\n",
       "  9,\n",
       "  2,\n",
       "  5,\n",
       "  9,\n",
       "  7,\n",
       "  9,\n",
       "  6,\n",
       "  3,\n",
       "  2,\n",
       "  8,\n",
       "  9,\n",
       "  7,\n",
       "  7,\n",
       "  3,\n",
       "  0,\n",
       "  9,\n",
       "  9,\n",
       "  2,\n",
       "  3,\n",
       "  8,\n",
       "  4,\n",
       "  0,\n",
       "  0,\n",
       "  9,\n",
       "  7,\n",
       "  7,\n",
       "  4,\n",
       "  0,\n",
       "  0,\n",
       "  6,\n",
       "  1,\n",
       "  9,\n",
       "  1,\n",
       "  0,\n",
       "  9,\n",
       "  5,\n",
       "  6,\n",
       "  3,\n",
       "  4,\n",
       "  1,\n",
       "  1,\n",
       "  6,\n",
       "  0,\n",
       "  1,\n",
       "  5,\n",
       "  3,\n",
       "  5,\n",
       "  9,\n",
       "  6,\n",
       "  0,\n",
       "  4,\n",
       "  4,\n",
       "  5,\n",
       "  5,\n",
       "  5,\n",
       "  9,\n",
       "  3,\n",
       "  5,\n",
       "  9,\n",
       "  8,\n",
       "  5,\n",
       "  8,\n",
       "  9,\n",
       "  6,\n",
       "  5,\n",
       "  8,\n",
       "  8,\n",
       "  2,\n",
       "  2,\n",
       "  3,\n",
       "  8,\n",
       "  9,\n",
       "  2,\n",
       "  3,\n",
       "  4,\n",
       "  4,\n",
       "  9,\n",
       "  0,\n",
       "  6,\n",
       "  4,\n",
       "  5,\n",
       "  5,\n",
       "  9,\n",
       "  0,\n",
       "  4,\n",
       "  6,\n",
       "  8,\n",
       "  0,\n",
       "  0,\n",
       "  1,\n",
       "  3,\n",
       "  9,\n",
       "  6,\n",
       "  9,\n",
       "  5,\n",
       "  1,\n",
       "  1,\n",
       "  7,\n",
       "  7,\n",
       "  0,\n",
       "  9,\n",
       "  7,\n",
       "  7,\n",
       "  1,\n",
       "  6,\n",
       "  6,\n",
       "  9,\n",
       "  3,\n",
       "  4,\n",
       "  2,\n",
       "  7,\n",
       "  0,\n",
       "  5,\n",
       "  2,\n",
       "  9,\n",
       "  7,\n",
       "  4,\n",
       "  6,\n",
       "  7,\n",
       "  1,\n",
       "  3,\n",
       "  4,\n",
       "  2,\n",
       "  4,\n",
       "  0,\n",
       "  4,\n",
       "  9,\n",
       "  4,\n",
       "  3,\n",
       "  4,\n",
       "  2,\n",
       "  6,\n",
       "  0,\n",
       "  3,\n",
       "  7,\n",
       "  4,\n",
       "  9,\n",
       "  6,\n",
       "  5,\n",
       "  9,\n",
       "  7,\n",
       "  2,\n",
       "  0,\n",
       "  4,\n",
       "  3,\n",
       "  8,\n",
       "  2,\n",
       "  7,\n",
       "  0,\n",
       "  5,\n",
       "  3,\n",
       "  3,\n",
       "  5,\n",
       "  0,\n",
       "  0,\n",
       "  6,\n",
       "  9,\n",
       "  0,\n",
       "  3,\n",
       "  5,\n",
       "  6,\n",
       "  1,\n",
       "  8,\n",
       "  6,\n",
       "  8,\n",
       "  6,\n",
       "  9,\n",
       "  8,\n",
       "  5,\n",
       "  3,\n",
       "  5,\n",
       "  0,\n",
       "  3,\n",
       "  7,\n",
       "  7,\n",
       "  6,\n",
       "  9,\n",
       "  0,\n",
       "  7,\n",
       "  9,\n",
       "  8,\n",
       "  2,\n",
       "  7,\n",
       "  9,\n",
       "  9,\n",
       "  5,\n",
       "  5,\n",
       "  0,\n",
       "  3,\n",
       "  2,\n",
       "  6,\n",
       "  0,\n",
       "  2,\n",
       "  7,\n",
       "  8,\n",
       "  3,\n",
       "  9,\n",
       "  7,\n",
       "  2,\n",
       "  2,\n",
       "  8,\n",
       "  6,\n",
       "  6,\n",
       "  3,\n",
       "  9,\n",
       "  2,\n",
       "  8,\n",
       "  8,\n",
       "  6,\n",
       "  0,\n",
       "  6,\n",
       "  7,\n",
       "  9,\n",
       "  5,\n",
       "  4,\n",
       "  5,\n",
       "  1,\n",
       "  1,\n",
       "  4,\n",
       "  5,\n",
       "  8,\n",
       "  5,\n",
       "  2,\n",
       "  7,\n",
       "  4,\n",
       "  5,\n",
       "  0,\n",
       "  6,\n",
       "  8,\n",
       "  9,\n",
       "  4,\n",
       "  3,\n",
       "  5,\n",
       "  6,\n",
       "  1,\n",
       "  3,\n",
       "  7,\n",
       "  0,\n",
       "  5,\n",
       "  1,\n",
       "  6,\n",
       "  2,\n",
       "  2,\n",
       "  4,\n",
       "  8,\n",
       "  1,\n",
       "  2,\n",
       "  2,\n",
       "  1,\n",
       "  2,\n",
       "  5,\n",
       "  9,\n",
       "  1,\n",
       "  1,\n",
       "  3,\n",
       "  4,\n",
       "  2,\n",
       "  9,\n",
       "  7,\n",
       "  0,\n",
       "  8,\n",
       "  2,\n",
       "  4,\n",
       "  6,\n",
       "  8,\n",
       "  0,\n",
       "  3,\n",
       "  7,\n",
       "  1,\n",
       "  8,\n",
       "  5,\n",
       "  8,\n",
       "  6,\n",
       "  5,\n",
       "  6,\n",
       "  2,\n",
       "  2,\n",
       "  3,\n",
       "  5,\n",
       "  7,\n",
       "  7,\n",
       "  ...],\n",
       " b'data': array([[255, 252, 253, ..., 173, 231, 248],\n",
       "        [127, 126, 127, ..., 102, 108, 112],\n",
       "        [116,  64,  19, ...,   7,   6,   5],\n",
       "        ...,\n",
       "        [ 35,  40,  42, ...,  77,  66,  50],\n",
       "        [189, 186, 185, ..., 169, 171, 171],\n",
       "        [229, 236, 234, ..., 173, 162, 161]], dtype=uint8),\n",
       " b'filenames': [b'compact_car_s_001706.png',\n",
       "  b'icebreaker_s_001689.png',\n",
       "  b'peke_s_000545.png',\n",
       "  b'convertible_s_000520.png',\n",
       "  b'domestic_dog_s_000455.png',\n",
       "  b'broodmare_s_000313.png',\n",
       "  b'capreolus_capreolus_s_001380.png',\n",
       "  b'true_cat_s_000886.png',\n",
       "  b'cruiser_s_000163.png',\n",
       "  b'ostrich_s_001561.png',\n",
       "  b'buckskin_s_000031.png',\n",
       "  b'cassowary_s_002024.png',\n",
       "  b'fighter_aircraft_s_001009.png',\n",
       "  b'convertible_s_000295.png',\n",
       "  b'lapdog_s_001489.png',\n",
       "  b'delivery_truck_s_001300.png',\n",
       "  b'rana_pipiens_s_000379.png',\n",
       "  b'ostrich_s_000026.png',\n",
       "  b'fighter_aircraft_s_000720.png',\n",
       "  b'supertanker_s_000275.png',\n",
       "  b'ostrich_s_000147.png',\n",
       "  b'male_horse_s_000742.png',\n",
       "  b'monoplane_s_000877.png',\n",
       "  b'fallow_deer_s_000351.png',\n",
       "  b'automobile_s_001645.png',\n",
       "  b'walking_horse_s_000071.png',\n",
       "  b'stallion_s_000015.png',\n",
       "  b'capreolus_capreolus_s_001283.png',\n",
       "  b'mule_deer_s_000357.png',\n",
       "  b'dumper_s_000805.png',\n",
       "  b'trailer_truck_s_001350.png',\n",
       "  b'green_frog_s_001384.png',\n",
       "  b'rhea_americana_s_000436.png',\n",
       "  b'capreolus_capreolus_s_001605.png',\n",
       "  b'auto_s_000800.png',\n",
       "  b'tailed_frog_s_000246.png',\n",
       "  b'cervus_elaphus_s_000903.png',\n",
       "  b'articulated_lorry_s_000916.png',\n",
       "  b'bullfrog_s_000797.png',\n",
       "  b'bullfrog_s_001028.png',\n",
       "  b'ladder_truck_s_001799.png',\n",
       "  b'toad_frog_s_001786.png',\n",
       "  b'wrecker_s_002395.png',\n",
       "  b'dump_truck_s_001363.png',\n",
       "  b'canis_familiaris_s_000450.png',\n",
       "  b'lipizzan_s_001223.png',\n",
       "  b'station_wagon_s_000464.png',\n",
       "  b'american_toad_s_001003.png',\n",
       "  b'dredger_s_000486.png',\n",
       "  b'wagtail_s_000747.png',\n",
       "  b'dump_truck_s_000163.png',\n",
       "  b'mutt_s_000997.png',\n",
       "  b'dump_truck_s_001097.png',\n",
       "  b'puppy_s_001045.png',\n",
       "  b'tabby_s_001593.png',\n",
       "  b'broodmare_s_000179.png',\n",
       "  b'car_s_000040.png',\n",
       "  b'domestic_cat_s_000913.png',\n",
       "  b'alley_cat_s_000843.png',\n",
       "  b'truck_s_000028.png',\n",
       "  b'estate_car_s_001092.png',\n",
       "  b'arabian_s_000782.png',\n",
       "  b'supertanker_s_000761.png',\n",
       "  b'garbage_truck_s_001211.png',\n",
       "  b'arabian_s_002303.png',\n",
       "  b'red_deer_s_001101.png',\n",
       "  b'tabby_cat_s_000069.png',\n",
       "  b'cervus_elaphus_s_001124.png',\n",
       "  b'trucking_rig_s_001247.png',\n",
       "  b'pekinese_s_000046.png',\n",
       "  b'police_boat_s_001118.png',\n",
       "  b'fallow_deer_s_001785.png',\n",
       "  b'camion_s_000599.png',\n",
       "  b'tabby_s_001774.png',\n",
       "  b'spring_frog_s_000407.png',\n",
       "  b'wagon_s_002463.png',\n",
       "  b'station_wagon_s_002537.png',\n",
       "  b'elk_s_001751.png',\n",
       "  b'house_cat_s_000064.png',\n",
       "  b'lorry_s_000562.png',\n",
       "  b'delivery_truck_s_001587.png',\n",
       "  b'wagon_s_000378.png',\n",
       "  b'trucking_rig_s_001431.png',\n",
       "  b'tractor_trailer_s_000653.png',\n",
       "  b'cassowary_s_000194.png',\n",
       "  b'fawn_s_001418.png',\n",
       "  b'mouser_s_000792.png',\n",
       "  b'bird_of_passage_s_000006.png',\n",
       "  b'sika_s_000337.png',\n",
       "  b'dawn_horse_s_001453.png',\n",
       "  b'police_cruiser_s_001385.png',\n",
       "  b'maltese_s_000562.png',\n",
       "  b'wagon_s_000572.png',\n",
       "  b'liberty_ship_s_001456.png',\n",
       "  b'western_toad_s_000622.png',\n",
       "  b'house_cat_s_002004.png',\n",
       "  b'bufo_bufo_s_002202.png',\n",
       "  b'tabby_cat_s_001983.png',\n",
       "  b'fallow_deer_s_001133.png',\n",
       "  b'red_deer_s_001719.png',\n",
       "  b'fire_engine_s_001465.png',\n",
       "  b'trucking_rig_s_001206.png',\n",
       "  b'dump_truck_s_000051.png',\n",
       "  b'lippizaner_s_001702.png',\n",
       "  b'twinjet_s_000316.png',\n",
       "  b'canis_familiaris_s_000192.png',\n",
       "  b'lippizan_s_001284.png',\n",
       "  b'lipizzan_s_000222.png',\n",
       "  b'elk_s_002102.png',\n",
       "  b'mackinaw_boat_s_000321.png',\n",
       "  b'cargo_ship_s_001389.png',\n",
       "  b'barking_deer_s_000041.png',\n",
       "  b'cassowary_s_000921.png',\n",
       "  b'airbus_s_002061.png',\n",
       "  b'dog_s_000726.png',\n",
       "  b'struthio_camelus_s_001539.png',\n",
       "  b'cervus_elaphus_s_000869.png',\n",
       "  b'tow_truck_s_000199.png',\n",
       "  b'convertible_s_001664.png',\n",
       "  b'broodmare_s_001158.png',\n",
       "  b'lippizan_s_000829.png',\n",
       "  b'alces_alces_s_000025.png',\n",
       "  b'fireboat_s_000299.png',\n",
       "  b'iceboat_s_000909.png',\n",
       "  b'cargo_vessel_s_002075.png',\n",
       "  b'stealth_fighter_s_000210.png',\n",
       "  b'nandu_s_000416.png',\n",
       "  b'cat_s_002221.png',\n",
       "  b'rana_pipiens_s_000276.png',\n",
       "  b'house_cat_s_001979.png',\n",
       "  b'lorry_s_002038.png',\n",
       "  b'propeller_plane_s_001101.png',\n",
       "  b'guard_boat_s_000832.png',\n",
       "  b'bird_s_000191.png',\n",
       "  b'passerine_s_001509.png',\n",
       "  b'roe_deer_s_000700.png',\n",
       "  b'cargo_ship_s_000807.png',\n",
       "  b'pontoon_s_001861.png',\n",
       "  b'automobile_s_002397.png',\n",
       "  b'pilot_boat_s_000165.png',\n",
       "  b'mongrel_s_002078.png',\n",
       "  b'stallion_s_001980.png',\n",
       "  b'bufo_speciosus_s_000114.png',\n",
       "  b'dive_bomber_s_000319.png',\n",
       "  b'dump_truck_s_000654.png',\n",
       "  b'car_s_000122.png',\n",
       "  b'fallow_deer_s_000450.png',\n",
       "  b'police_boat_s_000358.png',\n",
       "  b'struthio_camelus_s_000956.png',\n",
       "  b'beach_wagon_s_001062.png',\n",
       "  b'jetliner_s_001478.png',\n",
       "  b'maltese_s_001522.png',\n",
       "  b'taxicab_s_000987.png',\n",
       "  b'bufo_marinus_s_001514.png',\n",
       "  b'puppy_s_002336.png',\n",
       "  b'tabby_s_000945.png',\n",
       "  b'deer_s_001558.png',\n",
       "  b'trucking_rig_s_001489.png',\n",
       "  b'fire_truck_s_000881.png',\n",
       "  b'stealth_bomber_s_001893.png',\n",
       "  b'cat_s_002680.png',\n",
       "  b'lapdog_s_001871.png',\n",
       "  b'elk_s_001518.png',\n",
       "  b'cassowary_s_000678.png',\n",
       "  b'american_toad_s_000379.png',\n",
       "  b'cat_s_000529.png',\n",
       "  b'dump_truck_s_000134.png',\n",
       "  b'deer_s_001098.png',\n",
       "  b'garbage_truck_s_002021.png',\n",
       "  b'police_boat_s_001728.png',\n",
       "  b'rana_catesbeiana_s_000013.png',\n",
       "  b'sika_s_001792.png',\n",
       "  b'compact_car_s_001276.png',\n",
       "  b'estate_car_s_000605.png',\n",
       "  b'camion_s_000237.png',\n",
       "  b'cabin_cruiser_s_000092.png',\n",
       "  b'nandu_s_001797.png',\n",
       "  b'sparrow_s_002615.png',\n",
       "  b'motorcar_s_000647.png',\n",
       "  b'sea_boat_s_000923.png',\n",
       "  b'english_toy_spaniel_s_000064.png',\n",
       "  b'garbage_truck_s_000958.png',\n",
       "  b'broodmare_s_000574.png',\n",
       "  b'passenger_ship_s_001944.png',\n",
       "  b'convertible_s_001686.png',\n",
       "  b'estate_car_s_000283.png',\n",
       "  b'mule_deer_s_000105.png',\n",
       "  b'honey_eater_s_000507.png',\n",
       "  b'wapiti_s_001190.png',\n",
       "  b'wagtail_s_002036.png',\n",
       "  b'stealth_fighter_s_000504.png',\n",
       "  b'pilot_boat_s_000408.png',\n",
       "  b'banana_boat_s_001832.png',\n",
       "  b'jetliner_s_001399.png',\n",
       "  b'plane_s_000098.png',\n",
       "  b'cervus_elaphus_s_000041.png',\n",
       "  b'tabby_cat_s_000375.png',\n",
       "  b'biplane_s_000840.png',\n",
       "  b'lippizaner_s_000049.png',\n",
       "  b'broodmare_s_000261.png',\n",
       "  b'spring_frog_s_001103.png',\n",
       "  b'coupe_s_000330.png',\n",
       "  b'bullfrog_s_000880.png',\n",
       "  b'riding_horse_s_000015.png',\n",
       "  b'convertible_s_002855.png',\n",
       "  b'chihuahua_s_002291.png',\n",
       "  b'green_frog_s_002025.png',\n",
       "  b'estate_car_s_001663.png',\n",
       "  b'riding_horse_s_001813.png',\n",
       "  b'meadow_pipit_s_000907.png',\n",
       "  b'red_deer_s_000523.png',\n",
       "  b'fighter_aircraft_s_001711.png',\n",
       "  b'wagtail_s_001300.png',\n",
       "  b'emu_s_002057.png',\n",
       "  b'dog_s_001954.png',\n",
       "  b'lorry_s_000474.png',\n",
       "  b'felis_catus_s_000518.png',\n",
       "  b'bird_s_000659.png',\n",
       "  b'auto_s_001475.png',\n",
       "  b'red_deer_s_000560.png',\n",
       "  b'station_wagon_s_001407.png',\n",
       "  b'skylark_s_001002.png',\n",
       "  b'semi_s_000279.png',\n",
       "  b'pilot_boat_s_000294.png',\n",
       "  b'puppy_s_001467.png',\n",
       "  b'dunnock_s_000061.png',\n",
       "  b'cat_s_001939.png',\n",
       "  b'tabby_cat_s_002640.png',\n",
       "  b'capreolus_capreolus_s_001425.png',\n",
       "  b'camion_s_000809.png',\n",
       "  b'broodmare_s_001752.png',\n",
       "  b'rhea_s_001045.png',\n",
       "  b'mouser_s_000217.png',\n",
       "  b'ladder_truck_s_000283.png',\n",
       "  b'lippizaner_s_000687.png',\n",
       "  b'western_toad_s_001010.png',\n",
       "  b'bird_s_000769.png',\n",
       "  b'moving_van_s_002060.png',\n",
       "  b'lipizzan_s_001737.png',\n",
       "  b'maltese_s_001628.png',\n",
       "  b'roebuck_s_001085.png',\n",
       "  b'jetliner_s_000592.png',\n",
       "  b'banana_boat_s_001297.png',\n",
       "  b'broodmare_s_001857.png',\n",
       "  b'prunella_modularis_s_000423.png',\n",
       "  b'airbus_s_000329.png',\n",
       "  b'tomcat_s_000519.png',\n",
       "  b'maltese_s_001908.png',\n",
       "  b'estate_car_s_000756.png',\n",
       "  b'felis_catus_s_000306.png',\n",
       "  b'police_cruiser_s_000749.png',\n",
       "  b'appaloosa_s_000629.png',\n",
       "  b'cargo_ship_s_000852.png',\n",
       "  b'lippizan_s_000138.png',\n",
       "  b'delivery_truck_s_000310.png',\n",
       "  b'iceboat_s_000456.png',\n",
       "  b'pipit_s_000689.png',\n",
       "  b'truck_s_000918.png',\n",
       "  b'police_cruiser_s_000862.png',\n",
       "  b'mule_deer_s_000163.png',\n",
       "  b'freighter_s_000064.png',\n",
       "  b'frog_s_002708.png',\n",
       "  b'arabian_s_002131.png',\n",
       "  b'tabby_s_000012.png',\n",
       "  b'natterjack_s_000102.png',\n",
       "  b'lorry_s_000361.png',\n",
       "  b'stud_mare_s_001350.png',\n",
       "  b'articulated_lorry_s_000214.png',\n",
       "  b'reindeer_s_000017.png',\n",
       "  b'maltese_s_001529.png',\n",
       "  b'boat_s_000451.png',\n",
       "  b'fighter_s_000903.png',\n",
       "  b'mutt_s_000688.png',\n",
       "  b'natterjack_s_000197.png',\n",
       "  b'leptodactylid_s_000064.png',\n",
       "  b'stealth_bomber_s_001464.png',\n",
       "  b'containership_s_001015.png',\n",
       "  b'fallow_deer_s_001437.png',\n",
       "  b'alytes_obstetricans_s_000536.png',\n",
       "  b'shooting_brake_s_001123.png',\n",
       "  b'mule_deer_s_002031.png',\n",
       "  b'wagtail_s_001059.png',\n",
       "  b'night_bird_s_000018.png',\n",
       "  b'station_wagon_s_001041.png',\n",
       "  b'hospital_ship_s_000924.png',\n",
       "  b'alces_alces_s_000348.png',\n",
       "  b'red_deer_s_000868.png',\n",
       "  b'amphibious_aircraft_s_000005.png',\n",
       "  b'flightless_bird_s_000353.png',\n",
       "  b'cervus_elaphus_s_000531.png',\n",
       "  b'coupe_s_001572.png',\n",
       "  b'dump_truck_s_000715.png',\n",
       "  b'barge_s_000331.png',\n",
       "  b'tow_truck_s_001964.png',\n",
       "  b'attack_aircraft_s_001393.png',\n",
       "  b'lipizzan_s_001836.png',\n",
       "  b'taxi_s_001461.png',\n",
       "  b'convertible_s_000663.png',\n",
       "  b'bufo_viridis_s_001526.png',\n",
       "  b'elk_s_000645.png',\n",
       "  b'horse_s_000091.png',\n",
       "  b'sika_s_000743.png',\n",
       "  b'bufo_s_000085.png',\n",
       "  b'semi_s_002612.png',\n",
       "  b'house_cat_s_002180.png',\n",
       "  b'ostrich_s_001321.png',\n",
       "  b'stud_mare_s_001665.png',\n",
       "  b'felis_domesticus_s_000540.png',\n",
       "  b'tennessee_walker_s_000785.png',\n",
       "  b'elk_s_000978.png',\n",
       "  b'chihuahua_s_000171.png',\n",
       "  b'automobile_s_002457.png',\n",
       "  b'ladder_truck_s_001281.png',\n",
       "  b'american_toad_s_000987.png',\n",
       "  b'tabby_cat_s_000931.png',\n",
       "  b'wrecker_s_001909.png',\n",
       "  b'rana_clamitans_s_000312.png',\n",
       "  b'biplane_s_001528.png',\n",
       "  b'appaloosa_s_000003.png',\n",
       "  b'stealth_bomber_s_001954.png',\n",
       "  b'airliner_s_001515.png',\n",
       "  b'stealth_bomber_s_002337.png',\n",
       "  b'crapaud_s_000954.png',\n",
       "  b'bufo_americanus_s_001151.png',\n",
       "  b'wrecker_s_002049.png',\n",
       "  b'dawn_horse_s_001152.png',\n",
       "  b'domestic_cat_s_001769.png',\n",
       "  b'prunella_modularis_s_000304.png',\n",
       "  b'stealth_bomber_s_000287.png',\n",
       "  b'toad_s_000778.png',\n",
       "  b'tennessee_walking_horse_s_000677.png',\n",
       "  b'toy_spaniel_s_000064.png',\n",
       "  b'biplane_s_002256.png',\n",
       "  b'wagtail_s_001667.png',\n",
       "  b'airbus_s_000670.png',\n",
       "  b'true_cat_s_001846.png',\n",
       "  b'boat_s_000547.png',\n",
       "  b'bufo_viridis_s_000564.png',\n",
       "  b'dump_truck_s_001965.png',\n",
       "  b'fire_truck_s_001113.png',\n",
       "  b'buckskin_s_000138.png',\n",
       "  b'automobile_s_000673.png',\n",
       "  b'honey_eater_s_000123.png',\n",
       "  b'airbus_s_000406.png',\n",
       "  b'cargo_vessel_s_001805.png',\n",
       "  b'liberty_ship_s_000543.png',\n",
       "  b'twinjet_s_001372.png',\n",
       "  b'container_vessel_s_001626.png',\n",
       "  b'accentor_s_000938.png',\n",
       "  b'airliner_s_001443.png',\n",
       "  b'semi_s_001511.png',\n",
       "  b'maltese_dog_s_000307.png',\n",
       "  b'auto_s_001578.png',\n",
       "  b'tabby_cat_s_001218.png',\n",
       "  b'domestic_cat_s_000990.png',\n",
       "  b'airbus_s_001609.png',\n",
       "  b'gelding_s_000693.png',\n",
       "  b'bufo_bufo_s_000315.png',\n",
       "  b'station_wagon_s_001859.png',\n",
       "  b'jumbo_jet_s_000266.png',\n",
       "  b'arabian_s_000496.png',\n",
       "  b'lorry_s_001643.png',\n",
       "  b'true_cat_s_001512.png',\n",
       "  b'convertible_s_002971.png',\n",
       "  b'toad_frog_s_000634.png',\n",
       "  b'true_cat_s_001815.png',\n",
       "  b'toy_spaniel_s_000386.png',\n",
       "  b'station_wagon_s_002308.png',\n",
       "  b'passenger_ship_s_001361.png',\n",
       "  b'house_cat_s_001351.png',\n",
       "  b'tabby_s_000003.png',\n",
       "  b'ostrich_s_000040.png',\n",
       "  b'emu_s_000844.png',\n",
       "  b'peke_s_001302.png',\n",
       "  b'lippizaner_s_000009.png',\n",
       "  b'reindeer_s_000731.png',\n",
       "  b'merchantman_s_000770.png',\n",
       "  b'elk_s_000380.png',\n",
       "  b'domestic_cat_s_001270.png',\n",
       "  b'stealth_fighter_s_000498.png',\n",
       "  b'mongrel_s_001960.png',\n",
       "  b'trucking_rig_s_001305.png',\n",
       "  b'maltese_s_002070.png',\n",
       "  b'rangifer_caribou_s_000069.png',\n",
       "  b'felis_domesticus_s_000427.png',\n",
       "  b'apteryx_s_000447.png',\n",
       "  b'convertible_s_002242.png',\n",
       "  b'lorry_s_000894.png',\n",
       "  b'passerine_s_001815.png',\n",
       "  b'cargo_ship_s_001114.png',\n",
       "  b'gelding_s_000461.png',\n",
       "  b'oil_tanker_s_000825.png',\n",
       "  b'bird_s_001769.png',\n",
       "  b'moving_van_s_001990.png',\n",
       "  b'convertible_s_000354.png',\n",
       "  b'boat_s_000951.png',\n",
       "  b'leopard_frog_s_000365.png',\n",
       "  b'roe_deer_s_001864.png',\n",
       "  b'finch_s_000378.png',\n",
       "  b'tabby_cat_s_002703.png',\n",
       "  b'domestic_cat_s_001831.png',\n",
       "  b'fighter_s_000284.png',\n",
       "  b'container_vessel_s_001097.png',\n",
       "  b'cassowary_s_000865.png',\n",
       "  b'alley_cat_s_002237.png',\n",
       "  b'blenheim_spaniel_s_001020.png',\n",
       "  b'lippizaner_s_001249.png',\n",
       "  b'police_cruiser_s_000031.png',\n",
       "  b'banana_boat_s_001304.png',\n",
       "  b'lightship_s_000049.png',\n",
       "  b'compact_car_s_000373.png',\n",
       "  b'amphibious_aircraft_s_000858.png',\n",
       "  b'delivery_truck_s_000436.png',\n",
       "  b'trucking_rig_s_000247.png',\n",
       "  b'tipper_truck_s_000609.png',\n",
       "  b'speedboat_s_002017.png',\n",
       "  b'stallion_s_000834.png',\n",
       "  b'puppy_s_002348.png',\n",
       "  b'attack_aircraft_s_000631.png',\n",
       "  b'pekinese_s_002306.png',\n",
       "  b'airbus_s_001339.png',\n",
       "  b'japanese_spaniel_s_000843.png',\n",
       "  b'convertible_s_002920.png',\n",
       "  b'convertible_s_001428.png',\n",
       "  b'odocoileus_hemionus_s_000454.png',\n",
       "  b'american_toad_s_000132.png',\n",
       "  b'appaloosa_s_000475.png',\n",
       "  b'station_wagon_s_000949.png',\n",
       "  b'ostrich_s_000155.png',\n",
       "  b'motorboat_s_000986.png',\n",
       "  b'japanese_spaniel_s_000297.png',\n",
       "  b'compact_car_s_001290.png',\n",
       "  b'jumbo_jet_s_000005.png',\n",
       "  b'tabby_s_000745.png',\n",
       "  b'pekingese_s_000361.png',\n",
       "  b'merchant_ship_s_000858.png',\n",
       "  b'crapaud_s_000935.png',\n",
       "  b'texas_toad_s_000049.png',\n",
       "  b'rana_catesbeiana_s_001357.png',\n",
       "  b'stallion_s_001505.png',\n",
       "  b'lippizaner_s_001896.png',\n",
       "  b'elk_s_002780.png',\n",
       "  b'airbus_s_001562.png',\n",
       "  b'english_toy_spaniel_s_000935.png',\n",
       "  b'finch_s_000783.png',\n",
       "  b'lightship_s_001254.png',\n",
       "  b'domestic_cat_s_000436.png',\n",
       "  b'lipizzan_s_000303.png',\n",
       "  b'airbus_s_001658.png',\n",
       "  b'compact_car_s_001766.png',\n",
       "  b'tractor_trailer_s_000385.png',\n",
       "  b'laundry_truck_s_000182.png',\n",
       "  b'emu_s_001697.png',\n",
       "  b'coupe_s_001463.png',\n",
       "  b'lippizaner_s_001510.png',\n",
       "  b'toad_s_000896.png',\n",
       "  b'domestic_dog_s_001451.png',\n",
       "  b'domestic_cat_s_001818.png',\n",
       "  b'cargo_ship_s_000461.png',\n",
       "  b'true_cat_s_000616.png',\n",
       "  b'biplane_s_000459.png',\n",
       "  b'stud_mare_s_000430.png',\n",
       "  b'leopard_frog_s_000501.png',\n",
       "  b'apteryx_s_000164.png',\n",
       "  b'broodmare_s_000618.png',\n",
       "  b'quarter_horse_s_001480.png',\n",
       "  b'green_frog_s_000658.png',\n",
       "  b'chihuahua_s_000368.png',\n",
       "  b'bufo_s_000193.png',\n",
       "  b'cervus_elaphus_s_001603.png',\n",
       "  b'hospital_ship_s_000597.png',\n",
       "  b'domestic_dog_s_000381.png',\n",
       "  b'taxi_s_002110.png',\n",
       "  b'roe_deer_s_000221.png',\n",
       "  b'articulated_lorry_s_000757.png',\n",
       "  b'compact_car_s_001068.png',\n",
       "  b'biplane_s_000945.png',\n",
       "  b'puppy_s_002364.png',\n",
       "  b'arabian_s_000631.png',\n",
       "  b'stealth_fighter_s_000111.png',\n",
       "  b'accentor_s_000197.png',\n",
       "  b'dog_s_001929.png',\n",
       "  b'jetliner_s_001276.png',\n",
       "  b'abandoned_ship_s_000643.png',\n",
       "  b'automobile_s_001891.png',\n",
       "  b'stealth_fighter_s_001154.png',\n",
       "  b'cervus_elaphus_s_000123.png',\n",
       "  b'ostrich_s_000506.png',\n",
       "  b'nandu_s_001844.png',\n",
       "  b'maltese_dog_s_001636.png',\n",
       "  b'mutt_s_000893.png',\n",
       "  b'container_ship_s_002342.png',\n",
       "  b'airbus_s_001827.png',\n",
       "  b'passenger_ship_s_000482.png',\n",
       "  b'trucking_rig_s_000836.png',\n",
       "  b'passenger_ship_s_000323.png',\n",
       "  b'elk_s_001451.png',\n",
       "  b'lippizaner_s_000588.png',\n",
       "  b'bufo_s_001632.png',\n",
       "  b'wapiti_s_000048.png',\n",
       "  b'cabin_cruiser_s_000390.png',\n",
       "  b'rana_catesbeiana_s_000781.png',\n",
       "  b'broodmare_s_001464.png',\n",
       "  b'mongrel_s_001626.png',\n",
       "  b'multiengine_airplane_s_000004.png',\n",
       "  b'estate_car_s_000488.png',\n",
       "  b'true_cat_s_001932.png',\n",
       "  b'trucking_rig_s_000715.png',\n",
       "  b'lorry_s_001942.png',\n",
       "  b'automobile_s_001553.png',\n",
       "  b'cervus_elaphus_s_000067.png',\n",
       "  b'domestic_cat_s_000526.png',\n",
       "  b'freighter_s_001191.png',\n",
       "  b'western_toad_s_000233.png',\n",
       "  b'bufo_bufo_s_001448.png',\n",
       "  b'flying_bird_s_001055.png',\n",
       "  b'monoplane_s_001174.png',\n",
       "  b'lippizaner_s_001184.png',\n",
       "  b'motorcar_s_000576.png',\n",
       "  b'bufo_marinus_s_001022.png',\n",
       "  b'police_cruiser_s_000691.png',\n",
       "  b'frog_s_002154.png',\n",
       "  b'wapiti_s_000352.png',\n",
       "  b'woodland_caribou_s_001022.png',\n",
       "  b'pilot_boat_s_000551.png',\n",
       "  b'jetliner_s_000696.png',\n",
       "  b'jumbo_jet_s_000002.png',\n",
       "  b'accentor_s_001134.png',\n",
       "  b'puppy_s_000342.png',\n",
       "  b'fawn_s_000031.png',\n",
       "  b'elk_s_000982.png',\n",
       "  b'elk_s_000619.png',\n",
       "  b'alley_cat_s_001594.png',\n",
       "  b'arab_s_000207.png',\n",
       "  b'passerine_s_001958.png',\n",
       "  b'attack_aircraft_s_001120.png',\n",
       "  b'chihuahua_s_000377.png',\n",
       "  b'car_s_001879.png',\n",
       "  b'pekingese_s_001235.png',\n",
       "  b'broodmare_s_001614.png',\n",
       "  b'garbage_truck_s_000974.png',\n",
       "  b'cow_pony_s_000464.png',\n",
       "  b'twinjet_s_001510.png',\n",
       "  b'maltese_dog_s_001227.png',\n",
       "  b'ranid_s_000111.png',\n",
       "  b'bird_s_001114.png',\n",
       "  b'true_cat_s_001385.png',\n",
       "  b'sea_boat_s_000843.png',\n",
       "  b'stealth_fighter_s_001685.png',\n",
       "  b'bufo_viridis_s_001360.png',\n",
       "  b'american_elk_s_000894.png',\n",
       "  b'toad_s_002855.png',\n",
       "  b'packet_boat_s_001060.png',\n",
       "  b'rangifer_caribou_s_000211.png',\n",
       "  b'automobile_s_000232.png',\n",
       "  b'maltese_s_000576.png',\n",
       "  b'fighter_aircraft_s_001645.png',\n",
       "  b'leopard_frog_s_000065.png',\n",
       "  b'house_cat_s_002224.png',\n",
       "  b'tandem_trailer_s_000748.png',\n",
       "  b'rangifer_caribou_s_000306.png',\n",
       "  b'peke_s_000563.png',\n",
       "  b'muntjac_s_000809.png',\n",
       "  b'walking_horse_s_000090.png',\n",
       "  b'truck_s_000237.png',\n",
       "  b'rana_catesbeiana_s_000444.png',\n",
       "  b'wagtail_s_001540.png',\n",
       "  b'appaloosa_s_002073.png',\n",
       "  b'bufo_s_000098.png',\n",
       "  b'station_wagon_s_002242.png',\n",
       "  b'lippizan_s_000099.png',\n",
       "  b'motorboat_s_001383.png',\n",
       "  b'puppy_s_001492.png',\n",
       "  b'wagon_s_002268.png',\n",
       "  b'dump_truck_s_001225.png',\n",
       "  b'ship_s_000541.png',\n",
       "  b'compact_car_s_000827.png',\n",
       "  b'cat_s_001895.png',\n",
       "  b'hydrofoil_s_000030.png',\n",
       "  b'riding_horse_s_002039.png',\n",
       "  b'dama_dama_s_000018.png',\n",
       "  b'container_ship_s_000855.png',\n",
       "  b'wagon_s_000461.png',\n",
       "  b'cassowary_s_000576.png',\n",
       "  b'tabby_s_001154.png',\n",
       "  b'broodmare_s_001245.png',\n",
       "  b'jumbo_jet_s_000044.png',\n",
       "  b'tabby_s_001984.png',\n",
       "  b'capreolus_capreolus_s_000793.png',\n",
       "  b'jumbo_jet_s_000533.png',\n",
       "  b'monoplane_s_000861.png',\n",
       "  b'alces_alces_s_001312.png',\n",
       "  b'speedboat_s_002270.png',\n",
       "  b'alces_alces_s_001242.png',\n",
       "  b'motorcar_s_001331.png',\n",
       "  b'car_s_001461.png',\n",
       "  b'moving_van_s_002464.png',\n",
       "  b'odocoileus_hemionus_s_000559.png',\n",
       "  b'motorboat_s_001729.png',\n",
       "  b'fire_truck_s_001251.png',\n",
       "  b'toy_spaniel_s_000512.png',\n",
       "  b'flatboat_s_000066.png',\n",
       "  b'taxi_s_000835.png',\n",
       "  b'tabby_cat_s_002408.png',\n",
       "  b'stud_mare_s_000481.png',\n",
       "  b'transporter_s_002060.png',\n",
       "  b'pilot_boat_s_000906.png',\n",
       "  b'airbus_s_001559.png',\n",
       "  b'pekingese_s_002239.png',\n",
       "  b'motorboat_s_001900.png',\n",
       "  b'wapiti_s_001378.png',\n",
       "  b'house_cat_s_001229.png',\n",
       "  b'attack_aircraft_s_001501.png',\n",
       "  b'bufo_marinus_s_001026.png',\n",
       "  b'cargo_ship_s_002189.png',\n",
       "  b'automobile_s_002478.png',\n",
       "  b'chihuahua_s_000783.png',\n",
       "  b'rana_pipiens_s_000884.png',\n",
       "  b'twinjet_s_000800.png',\n",
       "  b'stealth_bomber_s_000477.png',\n",
       "  b'toy_s_000152.png',\n",
       "  b'biplane_s_000374.png',\n",
       "  b'tipper_truck_s_000132.png',\n",
       "  b'wagtail_s_001724.png',\n",
       "  b'house_cat_s_001920.png',\n",
       "  b'wagtail_s_000855.png',\n",
       "  b'quarter_horse_s_000023.png',\n",
       "  b'bufo_s_001847.png',\n",
       "  b'bufo_viridis_s_000747.png',\n",
       "  b'red_deer_s_001371.png',\n",
       "  b'tennessee_walker_s_000904.png',\n",
       "  b'american_elk_s_000040.png',\n",
       "  b'toy_spaniel_s_000337.png',\n",
       "  b'coupe_s_001008.png',\n",
       "  b'tabby_s_000127.png',\n",
       "  b'dive_bomber_s_000572.png',\n",
       "  b'police_boat_s_000362.png',\n",
       "  b'mesohippus_s_000268.png',\n",
       "  b'truck_s_001020.png',\n",
       "  b'airliner_s_001655.png',\n",
       "  b'leopard_frog_s_001519.png',\n",
       "  b'ferryboat_s_000160.png',\n",
       "  b'mule_deer_s_000342.png',\n",
       "  b'tomcat_s_001417.png',\n",
       "  b'dive_bomber_s_001128.png',\n",
       "  b'passenger_ship_s_001389.png',\n",
       "  b'quarter_horse_s_002195.png',\n",
       "  b'cervus_elaphus_s_000769.png',\n",
       "  b'fighter_aircraft_s_001867.png',\n",
       "  b'attack_aircraft_s_000013.png',\n",
       "  b'fallow_deer_s_001170.png',\n",
       "  b'tabby_cat_s_002332.png',\n",
       "  b'biplane_s_001921.png',\n",
       "  b'leopard_frog_s_000009.png',\n",
       "  b'monoplane_s_001137.png',\n",
       "  b'cab_s_000995.png',\n",
       "  b'wagon_s_002239.png',\n",
       "  b'japanese_spaniel_s_000853.png',\n",
       "  b'wapiti_s_000188.png',\n",
       "  b'lippizaner_s_001708.png',\n",
       "  b'fallow_deer_s_001388.png',\n",
       "  b'cassowary_s_000004.png',\n",
       "  b'dog_s_002179.png',\n",
       "  b'capreolus_capreolus_s_000914.png',\n",
       "  b'bufo_marinus_s_000934.png',\n",
       "  b'stag_s_000134.png',\n",
       "  b'toad_frog_s_000033.png',\n",
       "  b'powerboat_s_001374.png',\n",
       "  b'domestic_cat_s_001314.png',\n",
       "  b'norfolk_wherry_s_000180.png',\n",
       "  b'tabby_s_000268.png',\n",
       "  b'scow_s_000273.png',\n",
       "  b'broodmare_s_001020.png',\n",
       "  b'rana_catesbeiana_s_001643.png',\n",
       "  b'red_deer_s_001889.png',\n",
       "  b'bufo_marinus_s_000654.png',\n",
       "  b'truck_s_000866.png',\n",
       "  b'toad_s_002853.png',\n",
       "  b'compact_car_s_001123.png',\n",
       "  b'fighter_aircraft_s_000968.png',\n",
       "  b'attack_aircraft_s_001054.png',\n",
       "  b'mongrel_s_001737.png',\n",
       "  b'brocket_s_001110.png',\n",
       "  b'sea_boat_s_002108.png',\n",
       "  b'tennessee_walker_s_000679.png',\n",
       "  b'bufo_americanus_s_001551.png',\n",
       "  b'pekingese_s_000075.png',\n",
       "  b'anthus_pratensis_s_001148.png',\n",
       "  b'pekinese_s_002177.png',\n",
       "  b'lipizzan_s_001677.png',\n",
       "  b'tabby_cat_s_002472.png',\n",
       "  b'passenger_ship_s_002150.png',\n",
       "  b'tennessee_walking_horse_s_000359.png',\n",
       "  b'garbage_truck_s_000749.png',\n",
       "  b'stud_mare_s_000703.png',\n",
       "  b'passenger_ship_s_002165.png',\n",
       "  b'bufo_bufo_s_000450.png',\n",
       "  b'king_charles_spaniel_s_000034.png',\n",
       "  b'fire_engine_s_001146.png',\n",
       "  b'camion_s_000619.png',\n",
       "  b'oil_tanker_s_001613.png',\n",
       "  b'accentor_s_000475.png',\n",
       "  b'container_vessel_s_001080.png',\n",
       "  b'jumbojet_s_000696.png',\n",
       "  b'finch_s_000717.png',\n",
       "  b'rangifer_tarandus_s_001001.png',\n",
       "  b'pipit_s_000304.png',\n",
       "  b'stag_s_002382.png',\n",
       "  b'biplane_s_000841.png',\n",
       "  b'arabian_s_001986.png',\n",
       "  b'bufo_bufo_s_000397.png',\n",
       "  b'trucking_rig_s_001500.png',\n",
       "  b'felis_domesticus_s_000131.png',\n",
       "  b'coupe_s_001956.png',\n",
       "  b'honey_eater_s_000443.png',\n",
       "  b'bufo_s_001902.png',\n",
       "  b'meadow_pipit_s_000585.png',\n",
       "  b'blenheim_spaniel_s_000973.png',\n",
       "  b'dama_dama_s_000184.png',\n",
       "  b'wrecker_s_000026.png',\n",
       "  b'cassowary_s_000221.png',\n",
       "  b'mutt_s_001693.png',\n",
       "  b'dump_truck_s_001773.png',\n",
       "  b'lippizaner_s_000560.png',\n",
       "  b'tipper_truck_s_000768.png',\n",
       "  b'green_frog_s_001102.png',\n",
       "  b'alley_cat_s_002074.png',\n",
       "  b'prunella_modularis_s_000456.png',\n",
       "  b'banana_boat_s_001877.png',\n",
       "  b'trucking_rig_s_001292.png',\n",
       "  b'saddle_horse_s_000013.png',\n",
       "  b'tennessee_walker_s_000844.png',\n",
       "  b'tabby_cat_s_000130.png',\n",
       "  b'airliner_s_000559.png',\n",
       "  b'delivery_truck_s_000042.png',\n",
       "  b'tipper_truck_s_000316.png',\n",
       "  b'struthio_camelus_s_000461.png',\n",
       "  b'tabby_s_000221.png',\n",
       "  b'boat_s_000548.png',\n",
       "  b'dama_dama_s_000104.png',\n",
       "  b'airbus_s_000582.png',\n",
       "  b'biplane_s_000242.png',\n",
       "  b'articulated_lorry_s_000692.png',\n",
       "  b'appaloosa_s_000011.png',\n",
       "  b'gelding_s_001750.png',\n",
       "  b'muntjac_s_000015.png',\n",
       "  b'biplane_s_002235.png',\n",
       "  b'airbus_s_001651.png',\n",
       "  b'american_toad_s_000994.png',\n",
       "  b'wagon_s_002226.png',\n",
       "  b'moving_van_s_000398.png',\n",
       "  b'convertible_s_000128.png',\n",
       "  b'stealth_bomber_s_002114.png',\n",
       "  b'tractor_trailer_s_000183.png',\n",
       "  b'maltese_s_000758.png',\n",
       "  b'bufo_americanus_s_000855.png',\n",
       "  b'domestic_cat_s_002119.png',\n",
       "  b'capreolus_capreolus_s_000221.png',\n",
       "  b'wagon_s_001007.png',\n",
       "  b'coupe_s_000531.png',\n",
       "  b'bufo_calamita_s_000952.png',\n",
       "  b'airbus_s_001551.png',\n",
       "  b'car_s_001890.png',\n",
       "  b'maltese_dog_s_001236.png',\n",
       "  b'tabby_s_000474.png',\n",
       "  b'dog_s_001706.png',\n",
       "  b'dumper_s_002147.png',\n",
       "  b'rana_cascadae_s_000018.png',\n",
       "  b'propeller_plane_s_000609.png',\n",
       "  b'caribou_s_000063.png',\n",
       "  b'muntjac_s_001059.png',\n",
       "  b'pekinese_s_000883.png',\n",
       "  b'pekingese_s_000341.png',\n",
       "  b'pekingese_s_002116.png',\n",
       "  b'semi_s_000867.png',\n",
       "  b'tabby_cat_s_002638.png',\n",
       "  b'maltese_s_000808.png',\n",
       "  b'trailer_truck_s_001457.png',\n",
       "  b'abandoned_ship_s_000146.png',\n",
       "  b'maltese_s_000141.png',\n",
       "  b'tanker_s_000956.png',\n",
       "  b'wrecker_s_002064.png',\n",
       "  b'pickerel_frog_s_000867.png',\n",
       "  b'pekinese_s_000676.png',\n",
       "  b'liberty_ship_s_001530.png',\n",
       "  b'merchant_ship_s_000050.png',\n",
       "  b'nandu_s_000754.png',\n",
       "  b'ostrich_s_001570.png',\n",
       "  b'domestic_cat_s_000386.png',\n",
       "  b'banana_boat_s_000276.png',\n",
       "  b'trucking_rig_s_000966.png',\n",
       "  b'dunnock_s_001084.png',\n",
       "  b'felis_domesticus_s_000644.png',\n",
       "  b'odocoileus_hemionus_s_000801.png',\n",
       "  b'fallow_deer_s_001155.png',\n",
       "  b'trailer_truck_s_000615.png',\n",
       "  b'jetliner_s_000705.png',\n",
       "  b'southwestern_toad_s_000075.png',\n",
       "  b'mule_deer_s_002083.png',\n",
       "  b'pekingese_s_001055.png',\n",
       "  b'lapdog_s_001864.png',\n",
       "  b'tipper_s_001942.png',\n",
       "  b'attack_aircraft_s_000302.png',\n",
       "  b'musk_deer_s_000153.png',\n",
       "  b'toad_frog_s_000383.png',\n",
       "  b'norfolk_wherry_s_000179.png',\n",
       "  b'monoplane_s_000141.png',\n",
       "  b'stealth_fighter_s_001106.png',\n",
       "  b'convertible_s_002474.png',\n",
       "  b'domestic_cat_s_001445.png',\n",
       "  b'tipper_truck_s_000008.png',\n",
       "  b'american_toad_s_000353.png',\n",
       "  b'camion_s_000200.png',\n",
       "  b'canis_familiaris_s_000781.png',\n",
       "  b'station_wagon_s_001038.png',\n",
       "  b'compact_car_s_002173.png',\n",
       "  b'dawn_horse_s_001535.png',\n",
       "  b'saddle_horse_s_001198.png',\n",
       "  b'multiengine_airplane_s_000237.png',\n",
       "  b'semi_s_001249.png',\n",
       "  b'broodmare_s_000397.png',\n",
       "  b'tennessee_walker_s_000510.png',\n",
       "  b'automobile_s_000756.png',\n",
       "  b'bufo_bufo_s_001716.png',\n",
       "  b'pickerel_frog_s_000005.png',\n",
       "  b'lorry_s_002195.png',\n",
       "  b'true_cat_s_001128.png',\n",
       "  b'american_elk_s_001829.png',\n",
       "  b'bird_s_000223.png',\n",
       "  b'appaloosa_s_002226.png',\n",
       "  b'stealth_bomber_s_001192.png',\n",
       "  b'domestic_dog_s_000909.png',\n",
       "  b'nandu_s_000066.png',\n",
       "  b'tipper_truck_s_001720.png',\n",
       "  b'broodmare_s_000536.png',\n",
       "  b'barren_ground_caribou_s_000628.png',\n",
       "  b'crapaud_s_000659.png',\n",
       "  b'quarter_horse_s_001133.png',\n",
       "  b'taxi_s_001318.png',\n",
       "  b'tabby_s_000134.png',\n",
       "  b'fallow_deer_s_001870.png',\n",
       "  b'finch_s_000457.png',\n",
       "  b'moose_s_001303.png',\n",
       "  b'fighter_aircraft_s_001071.png',\n",
       "  b'mule_deer_s_002496.png',\n",
       "  b'semi_s_001116.png',\n",
       "  b'alces_alces_s_002299.png',\n",
       "  b'domestic_cat_s_000831.png',\n",
       "  b'cervus_sika_s_000362.png',\n",
       "  b'emu_s_001925.png',\n",
       "  b'rana_temporaria_s_000361.png',\n",
       "  b'amphibious_aircraft_s_000019.png',\n",
       "  b'tabby_cat_s_000606.png',\n",
       "  b'quarter_horse_s_000585.png',\n",
       "  b'cervus_unicolor_s_000266.png',\n",
       "  b'dump_truck_s_001872.png',\n",
       "  b'spadefoot_s_000078.png',\n",
       "  b'toy_spaniel_s_001691.png',\n",
       "  b'garbage_truck_s_001343.png',\n",
       "  b'dawn_horse_s_001446.png',\n",
       "  b'pipit_s_000232.png',\n",
       "  b'stealth_fighter_s_000079.png',\n",
       "  b'sika_s_000046.png',\n",
       "  b'domestic_cat_s_001119.png',\n",
       "  b'speedboat_s_002421.png',\n",
       "  b'accentor_s_000183.png',\n",
       "  b'stud_mare_s_000303.png',\n",
       "  b'stealth_bomber_s_002217.png',\n",
       "  b'maltese_s_000312.png',\n",
       "  b'mouser_s_001190.png',\n",
       "  b'domestic_cat_s_000230.png',\n",
       "  b'maltese_s_001720.png',\n",
       "  b'fighter_aircraft_s_001590.png',\n",
       "  b'monoplane_s_000357.png',\n",
       "  b'alytes_obstetricans_s_000359.png',\n",
       "  b'delivery_truck_s_001106.png',\n",
       "  b'monoplane_s_000405.png',\n",
       "  b'domestic_cat_s_000673.png',\n",
       "  b'japanese_spaniel_s_000343.png',\n",
       "  b'rana_temporaria_s_000303.png',\n",
       "  b'compact_car_s_000317.png',\n",
       "  b'passenger_ship_s_002065.png',\n",
       "  b'pickerel_frog_s_000786.png',\n",
       "  b'tank_ship_s_001662.png',\n",
       "  b'crapaud_s_000179.png',\n",
       "  b'tandem_trailer_s_000192.png',\n",
       "  b'speedboat_s_001544.png',\n",
       "  b'maltese_s_000135.png',\n",
       "  b'cat_s_000399.png',\n",
       "  b'toy_dog_s_000484.png',\n",
       "  b'twinjet_s_000380.png',\n",
       "  b'tomcat_s_001873.png',\n",
       "  b'gelding_s_000638.png',\n",
       "  b'tennessee_walker_s_000025.png',\n",
       "  b'rana_catesbeiana_s_001224.png',\n",
       "  b'tractor_trailer_s_001424.png',\n",
       "  b'twinjet_s_000666.png',\n",
       "  b'appaloosa_s_001407.png',\n",
       "  b'delivery_truck_s_001481.png',\n",
       "  b'packet_boat_s_001254.png',\n",
       "  b'sparrow_s_002100.png',\n",
       "  b'broodmare_s_001650.png',\n",
       "  b'garbage_truck_s_002009.png',\n",
       "  b'ladder_truck_s_000851.png',\n",
       "  b'mutt_s_000894.png',\n",
       "  b'blenheim_spaniel_s_001108.png',\n",
       "  b'attack_aircraft_s_000659.png',\n",
       "  b'domestic_cat_s_001552.png',\n",
       "  b'wagtail_s_001028.png',\n",
       "  b'green_frog_s_001713.png',\n",
       "  b'attack_aircraft_s_000166.png',\n",
       "  b'wagtail_s_001563.png',\n",
       "  b'arabian_s_000545.png',\n",
       "  b'container_ship_s_001895.png',\n",
       "  b'mouser_s_002008.png',\n",
       "  b'lorry_s_000259.png',\n",
       "  b'lippizan_s_000362.png',\n",
       "  b'ratite_s_000157.png',\n",
       "  b'honey_eater_s_001464.png',\n",
       "  b'boat_s_002663.png',\n",
       "  b'bufo_marinus_s_001677.png',\n",
       "  b'rana_pipiens_s_000059.png',\n",
       "  b'true_cat_s_001866.png',\n",
       "  b'fire_engine_s_000885.png',\n",
       "  b'struthio_camelus_s_000141.png',\n",
       "  b'speedboat_s_001216.png',\n",
       "  b'tanker_s_001689.png',\n",
       "  b'bufo_s_000647.png',\n",
       "  b'propeller_plane_s_001214.png',\n",
       "  b'toad_s_001483.png',\n",
       "  b'lippizaner_s_000955.png',\n",
       "  b'tipper_s_001909.png',\n",
       "  b'puppy_s_000075.png',\n",
       "  b'cervus_elaphus_s_000326.png',\n",
       "  b'maltese_s_000368.png',\n",
       "  b'coupe_s_000930.png',\n",
       "  b'car_s_000486.png',\n",
       "  b'fawn_s_000936.png',\n",
       "  b'pekingese_s_002087.png',\n",
       "  b'speedboat_s_002393.png',\n",
       "  b'dog_s_001444.png',\n",
       "  b'skylark_s_001800.png',\n",
       "  b'riding_horse_s_001883.png',\n",
       "  b'roe_deer_s_001165.png',\n",
       "  b'puppy_s_002400.png',\n",
       "  b'attack_aircraft_s_001046.png',\n",
       "  b'bufo_bufo_s_002053.png',\n",
       "  b'cargo_ship_s_000425.png',\n",
       "  b'tipper_lorry_s_000339.png',\n",
       "  b'roe_deer_s_000514.png',\n",
       "  b'true_cat_s_001816.png',\n",
       "  b'pekingese_s_000474.png',\n",
       "  b'frog_s_001625.png',\n",
       "  b'convertible_s_000987.png',\n",
       "  b'tabby_cat_s_001051.png',\n",
       "  b'quarter_horse_s_000456.png',\n",
       "  b'stealth_fighter_s_001722.png',\n",
       "  b'puppy_s_000649.png',\n",
       "  b'compact_car_s_000718.png',\n",
       "  b'rana_pipiens_s_000271.png',\n",
       "  b'wagtail_s_001208.png',\n",
       "  b'apteryx_s_000130.png',\n",
       "  b'moose_s_000150.png',\n",
       "  b'cargo_ship_s_000888.png',\n",
       "  b'auto_s_001664.png',\n",
       "  b'rhea_americana_s_000776.png',\n",
       "  b'wagtail_s_000933.png',\n",
       "  b'shooting_brake_s_001543.png',\n",
       "  b'struthio_camelus_s_000462.png',\n",
       "  b'chihuahua_s_000523.png',\n",
       "  b'dump_truck_s_000988.png',\n",
       "  b'car_s_001319.png',\n",
       "  b'compact_car_s_001067.png',\n",
       "  b'tabby_s_000145.png',\n",
       "  b'fawn_s_001324.png',\n",
       "  b'passerine_s_002061.png',\n",
       "  b'trucking_rig_s_001227.png',\n",
       "  b'lipizzan_s_001308.png',\n",
       "  b'jetliner_s_001334.png',\n",
       "  b'rowing_boat_s_000110.png',\n",
       "  b'pipit_s_000108.png',\n",
       "  b'cervus_elaphus_s_000721.png',\n",
       "  b'bufo_bufo_s_000176.png',\n",
       "  b'flatboat_s_000279.png',\n",
       "  b'dive_bomber_s_000531.png',\n",
       "  b'true_cat_s_001814.png',\n",
       "  b'lippizan_s_000345.png',\n",
       "  b'coupe_s_001428.png',\n",
       "  b'hydrofoil_s_000028.png',\n",
       "  b'dog_s_001086.png',\n",
       "  b'sea_boat_s_000357.png',\n",
       "  b'green_frog_s_000995.png',\n",
       "  b'chihuahua_s_002035.png',\n",
       "  b'green_frog_s_001619.png',\n",
       "  b'hedge_sparrow_s_000094.png',\n",
       "  b'finch_s_000409.png',\n",
       "  b'felis_domesticus_s_000535.png',\n",
       "  b'blenheim_spaniel_s_000057.png',\n",
       "  b'broodmare_s_001547.png',\n",
       "  b'lipizzan_s_000774.png',\n",
       "  ...]}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train5.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "768839cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "length of training batches: 10000\n",
      "Total number of images in a training batch:  10000\n",
      "Total number of pixels in an image:  3072\n"
     ]
    }
   ],
   "source": [
    "print(\"length of training batches:\", len(train1[b'labels']))\n",
    "print(\"Total number of images in a training batch: \", len(train1[b'data']))\n",
    "print(\"Total number of pixels in an image: \", len(train1[b'data'][0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2b18927",
   "metadata": {},
   "source": [
    "## Defining binary ground truth labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4db9e14f",
   "metadata": {},
   "outputs": [],
   "source": [
    "for index, label in enumerate(train1[b'labels']):\n",
    "    if label in [2,3,4,5,6,7]:\n",
    "        train1[b'labels'][index]=1\n",
    "    else:\n",
    "        train1[b'labels'][index]=-1\n",
    "\n",
    "for index, label in enumerate(train2[b'labels']):\n",
    "    if label in [2,3,4,5,6,7]:\n",
    "        train2[b'labels'][index]=1\n",
    "    else:\n",
    "        train2[b'labels'][index]=-1\n",
    "        \n",
    "for index, label in enumerate(train3[b'labels']):\n",
    "    if label in [2,3,4,5,6,7]:\n",
    "        train3[b'labels'][index]=1\n",
    "    else:\n",
    "        train3[b'labels'][index]=-1\n",
    "        \n",
    "for index, label in enumerate(train4[b'labels']):\n",
    "    if label in [2,3,4,5,6,7]:\n",
    "        train4[b'labels'][index]=1\n",
    "    else:\n",
    "        train4[b'labels'][index]=-1\n",
    "        \n",
    "for index, label in enumerate(train5[b'labels']):\n",
    "    if label in [2,3,4,5,6,7]:\n",
    "        train5[b'labels'][index]=1\n",
    "    else:\n",
    "        train5[b'labels'][index]=-1\n",
    "        \n",
    "for index, label in enumerate(test[b'labels']):\n",
    "    if label in [2,3,4,5,6,7]:\n",
    "        test[b'labels'][index]=1\n",
    "    else:\n",
    "        test[b'labels'][index]=-1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f377d16",
   "metadata": {},
   "source": [
    "## Counting positive and negative instances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e13c677c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Positive training instances: 30000\n",
      "Negative training instances: 20000\n"
     ]
    }
   ],
   "source": [
    "positive_counts=0\n",
    "negative_counts=0\n",
    "\n",
    "for element in train1[b'labels']:\n",
    "    if element==1:\n",
    "        positive_counts+=1\n",
    "    else:\n",
    "        negative_counts+=1\n",
    "for element in train2[b'labels']:\n",
    "    if element==1:\n",
    "        positive_counts+=1\n",
    "    else:\n",
    "        negative_counts+=1\n",
    "        \n",
    "for element in train3[b'labels']:\n",
    "    if element==1:\n",
    "        positive_counts+=1\n",
    "    else:\n",
    "        negative_counts+=1\n",
    "        \n",
    "for element in train4[b'labels']:\n",
    "    if element==1:\n",
    "        positive_counts+=1\n",
    "    else:\n",
    "        negative_counts+=1\n",
    "        \n",
    "for element in train5[b'labels']:\n",
    "    if element==1:\n",
    "        positive_counts+=1\n",
    "    else:\n",
    "        negative_counts+=1\n",
    "\n",
    "print(\"Positive training instances:\", positive_counts)\n",
    "print(\"Negative training instances:\", negative_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fcf5ddba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Positive training instances: 6000\n",
      "Negative training instances: 4000\n"
     ]
    }
   ],
   "source": [
    "positive_counts=0\n",
    "negative_counts=0\n",
    "\n",
    "for element in test[b'labels']:\n",
    "    if element==1:\n",
    "        positive_counts+=1\n",
    "    else:\n",
    "        negative_counts+=1\n",
    "\n",
    "print(\"Positive training instances:\", positive_counts)\n",
    "print(\"Negative training instances:\", negative_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6243692b",
   "metadata": {},
   "source": [
    "## Concatenating training inputs and outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cd5afff6",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_inputs=[]\n",
    "\n",
    "for index, instance in enumerate(train1[b'data']):\n",
    "    #Adding the first input (X=1) for the bias term\n",
    "    instance=np.insert(instance, 0, 1)\n",
    "    training_inputs.append(list(instance))\n",
    "for index, instance in enumerate(train2[b'data']):\n",
    "    #Adding the first input (X=1) for the bias term\n",
    "    instance=np.insert(instance, 0, 1)\n",
    "    training_inputs.append(list(instance))\n",
    "for index, instance in enumerate(train3[b'data']):\n",
    "    #Adding the first input (X=1) for the bias term\n",
    "    instance=np.insert(instance, 0, 1)\n",
    "    training_inputs.append(list(instance))\n",
    "for index, instance in enumerate(train4[b'data']):\n",
    "    #Adding the first input (X=1) for the bias term\n",
    "    instance=np.insert(instance, 0, 1)\n",
    "    training_inputs.append(list(instance))\n",
    "for index, instance in enumerate(train5[b'data']):\n",
    "    #Adding the first input (X=1) for the bias term\n",
    "    instance=np.insert(instance, 0, 1)\n",
    "    training_inputs.append(list(instance))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dad31295",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_inputs=np.array(training_inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "94a2212d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50000, 3073)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_inputs.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5327577b",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_outputs=[]\n",
    "\n",
    "for instance in train1[b'labels']:\n",
    "    training_outputs.append(instance)\n",
    "for instance in train2[b'labels']:\n",
    "    training_outputs.append(instance)\n",
    "for instance in train3[b'labels']:\n",
    "    training_outputs.append(instance)\n",
    "for instance in train4[b'labels']:\n",
    "    training_outputs.append(instance)\n",
    "for instance in train5[b'labels']:\n",
    "    training_outputs.append(instance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3a96367f",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_outputs=np.array(training_outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9c01c0ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1, -1, -1, ..., -1, -1, -1])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af063436",
   "metadata": {},
   "source": [
    "## Defining testing inputs and outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "94b38460",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing_inputs=[]\n",
    "\n",
    "for index, instance in enumerate(test[b'data']):\n",
    "    #Adding the first input (X=1) for the bias term\n",
    "    instance=np.insert(instance, 0, 1)\n",
    "    testing_inputs.append(list(instance))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "51b6e978",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing_inputs=np.array(testing_inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fec63ddf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  1, 158, 159, ..., 124, 129, 110],\n",
       "       [  1, 235, 231, ..., 178, 191, 199],\n",
       "       [  1, 158, 158, ...,   8,   3,   7],\n",
       "       ...,\n",
       "       [  1,  20,  19, ...,  50,  53,  47],\n",
       "       [  1,  25,  15, ...,  80,  81,  80],\n",
       "       [  1,  73,  98, ...,  94,  58,  26]], dtype=uint8)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testing_inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f606bbfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing_outputs=[]\n",
    "\n",
    "for instance in test[b'labels']:\n",
    "    testing_outputs.append(instance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f0a7b264",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing_outputs=np.array(testing_outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "26bc0567",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(testing_outputs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c15072bc",
   "metadata": {},
   "source": [
    "# Training and testing the perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fbaaa6c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(x):\n",
    "    return 1/(1+np.exp(-x))\n",
    "#def sigmoid_derivative(x):\n",
    "    #return x*(1-x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5062fb70",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(w,x):\n",
    "    return sigmoid(np.dot(w,x.T))\n",
    "\n",
    "def loss(y_bar, y):\n",
    "    n=len(y)\n",
    "    #Calculating total_loss as max(0, -y*f(x))/n\n",
    "    total_loss = -y_bar*y\n",
    "    total_loss[total_loss < 0] = 0\n",
    "    return np.sum(total_loss)/n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f87491f",
   "metadata": {},
   "source": [
    "### Training until convergence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a351f6e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of iterations: 1\n",
      "Old loss: 0.6\n",
      "New loss: 0.4\n",
      "Convergence: 0.33333333333333326\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\User\\AppData\\Local\\Temp\\ipykernel_1180\\3804164567.py:2: RuntimeWarning: overflow encountered in exp\n",
      "  return 1/(1+np.exp(-x))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of iterations: 2\n",
      "Old loss: 0.4\n",
      "New loss: 0.6\n",
      "Convergence: 0.4999999999999999\n",
      "\n",
      "\n",
      "Number of iterations: 3\n",
      "Old loss: 0.6\n",
      "New loss: 0.4\n",
      "Convergence: 0.33333333333333326\n",
      "\n",
      "\n",
      "Number of iterations: 4\n",
      "Old loss: 0.4\n",
      "New loss: 0.6\n",
      "Convergence: 0.4999999999999999\n",
      "\n",
      "\n",
      "Number of iterations: 5\n",
      "Old loss: 0.6\n",
      "New loss: 0.4\n",
      "Convergence: 0.33333333333333326\n",
      "\n",
      "\n",
      "Number of iterations: 6\n",
      "Old loss: 0.4\n",
      "New loss: 0.59938\n",
      "Convergence: 0.49845\n",
      "\n",
      "\n",
      "Number of iterations: 7\n",
      "Old loss: 0.59938\n",
      "New loss: 0.4\n",
      "Convergence: 0.33264373185625146\n",
      "\n",
      "\n",
      "Number of iterations: 8\n",
      "Old loss: 0.4\n",
      "New loss: 0.28004\n",
      "Convergence: 0.2999\n",
      "\n",
      "\n",
      "Number of iterations: 9\n",
      "Old loss: 0.28004\n",
      "New loss: 0.39598\n",
      "Convergence: 0.4140122839594343\n",
      "\n",
      "\n",
      "Number of iterations: 10\n",
      "Old loss: 0.39598\n",
      "New loss: 0.6\n",
      "Convergence: 0.5152280418202939\n",
      "\n",
      "\n",
      "Number of iterations: 11\n",
      "Old loss: 0.6\n",
      "New loss: 0.40002\n",
      "Convergence: 0.3333\n",
      "\n",
      "\n",
      "Number of iterations: 12\n",
      "Old loss: 0.40002\n",
      "New loss: 0.58816\n",
      "Convergence: 0.4703264836758163\n",
      "\n",
      "\n",
      "Number of iterations: 13\n",
      "Old loss: 0.58816\n",
      "New loss: 0.40002\n",
      "Convergence: 0.3198789445048967\n",
      "\n",
      "\n",
      "Number of iterations: 14\n",
      "Old loss: 0.40002\n",
      "New loss: 0.35054\n",
      "Convergence: 0.12369381530923447\n",
      "\n",
      "\n",
      "Number of iterations: 15\n",
      "Old loss: 0.35054\n",
      "New loss: 0.3995\n",
      "Convergence: 0.1396702230843841\n",
      "\n",
      "\n",
      "Number of iterations: 16\n",
      "Old loss: 0.3995\n",
      "New loss: 0.58264\n",
      "Convergence: 0.4584230287859825\n",
      "\n",
      "\n",
      "Number of iterations: 17\n",
      "Old loss: 0.58264\n",
      "New loss: 0.4\n",
      "Convergence: 0.3134697240148291\n",
      "\n",
      "\n",
      "Number of iterations: 18\n",
      "Old loss: 0.4\n",
      "New loss: 0.39516\n",
      "Convergence: 0.012100000000000027\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Inititalizing weights\n",
    "W= np.random.random((1,3073))\n",
    "\n",
    "difference_in_loss = 1\n",
    "i=0\n",
    "\n",
    "while abs(difference_in_loss) > 0.10:\n",
    "    perc_input = training_inputs\n",
    "    perc_output = predict(W, perc_input)\n",
    "    \n",
    "    #Turning predictions of \"not an animal\" into -1 to help calculate loss using max(0, -y*f(x))/n\n",
    "    perc_output[perc_output==0] = -1\n",
    "    \n",
    "    print(\"Number of iterations:\", i+1)\n",
    "    print(\"Old loss:\", old_loss)\n",
    "    \n",
    "    new_loss = loss (perc_output, training_outputs)\n",
    "    print(\"New loss:\", new_loss)\n",
    "    \n",
    "    difference_in_loss = (old_loss-new_loss)/old_loss\n",
    "    print(\"Convergence:\", abs(difference_in_loss))\n",
    "    print(\"\\n\")\n",
    "    \n",
    "    old_loss=new_loss\n",
    "    \n",
    "    #Updating the weights\n",
    "    adjustment = (training_outputs - perc_output) #0 if prediction is correct 1 or -1 if prediction is incorrect\n",
    "    W += np.dot(adjustment, perc_input)\n",
    "    \n",
    "    i+=1"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "c81da52f",
   "metadata": {},
   "source": [
    "### Testing and reporting performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "37f73d1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\User\\AppData\\Local\\Temp\\ipykernel_1180\\3804164567.py:2: RuntimeWarning: overflow encountered in exp\n",
      "  return 1/(1+np.exp(-x))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The testing accuracy performance for model with 10% convergence is 60.06 %\n",
      "Total false positives:  3993\n",
      "Total false negatives:  1\n",
      "The bias is:  65436.36387818071\n",
      "The weights are:  [  65436.36387818  140528.96285459  286140.81415289 ... -318527.90573169\n",
      " -650385.19293619 -910875.23397803]\n"
     ]
    }
   ],
   "source": [
    "#Reporting the accuracy performance\n",
    "perc_predictions = predict(W, testing_inputs)\n",
    "perc_predictions[perc_predictions==0] = -1\n",
    "percentageError = loss(perc_predictions, testing_outputs)\n",
    "accuracy = 1 - percentageError\n",
    "print(\"The testing accuracy performance for model with 10% convergence is\", accuracy*100, \"%\")\n",
    "\n",
    "#Reporting the false positives and false negatives\n",
    "false_positives = 0\n",
    "false_negatives = 0\n",
    "\n",
    "for index, value in enumerate(testing_outputs.tolist()):\n",
    "    if testing_outputs.tolist()[index]==perc_predictions[0][index]:\n",
    "        continue\n",
    "    elif testing_outputs.tolist()[index]==1 and perc_predictions[0][index]==-1:\n",
    "        false_negatives += 1\n",
    "    elif testing_outputs.tolist()[index]==-1 and perc_predictions[0][index]==1:\n",
    "        false_positives += 1\n",
    "\n",
    "print (\"Total false positives: \",false_positives)\n",
    "print (\"Total false negatives: \",false_negatives)\n",
    "\n",
    "#Reporting the bias\n",
    "print (\"The bias is: \", W[0][0])\n",
    "\n",
    "#Reporting the weights\n",
    "print(\"The weights are: \", W[0])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
